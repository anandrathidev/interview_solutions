GIT Commands 
GIT Config:
	show:
		You can view all of your settings and where they are coming from using:
		$ git config --list --show-origin

		Each level overrides values in the previous level
		UNIX                                                       
		/etc/gitconfig --system                                    
		~/.gitconfig or ~/.config/git/config                       
		.git/config of whatever repository                                                 

		WIN
		C:\ProgramData\Git\config
		$HOME\.gitconfig	Your Identity: 

		it’s immutably baked into the commits.
		$ git config --global user.email johndoe@example.com
	Editor:
		$ git config --global core.editor emacs
		$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
		
Getting a Git Repository
	You typically obtain a Git repository in one of two ways:
	1. You can take a local directory that is currently not under version control, and turn it into a Git repository, or
		$ git init 
		This creates a new subdirectory named .git that contains all of your necessary repository files
		then use git add commands.
	
	2. You can clone an existing Git repository from elsewhere.		
		$ git clone https://github.com/libgit2/libgit2

Recording Changes to the Repository
	Git states 
		UnModified. => edit file => 
		Modified.=> stage  => Staged.
		Tracked.  => modify the file =>  Modified. => stage  => Staged. 
		Untracked. => add the file => Staged. 
		Staged. => commit => UnModified.

	$ git status
	
	Tracking untracked files
		$ git add README 

	Short status git status -s
	M = Modified.	
	A = Staged.
	MM = Was modified, staged and then modified again.
	?? = Untracked.
	
		$ git status -s	
		M README
		MM Rakefile
		A lib/git.rb
		M lib/simplegit.rb
		?? LICENSE.txt	
	
	
	Ignoring Files	
		example .gitignore
		*.[oa] # ignore any files ending in “.o” or “.a”
		*~  # ignore all files whose names end with a tilde (~)
		
		Rules:
		• Blank lines or lines starting with # are ignored.
		• Standard glob patterns work, and will be applied recursively throughout the entire working
		tree.
		• You can start patterns with a forward slash (/) to avoid recursivity.
		• You can end patterns with a forward slash (/) to specify a directory.
		• You can negate a pattern by starting it with an exclamation point (!).
		
	Viewing Your Staged and Unstaged Changes
		$ git status
		
		To see what you’ve changed but not yet staged do git diff
		git diff is for the Modified files yet not staged 
		$ git diff
		
		To see staged that will go into your next commit. --staged --cached are synonymous
		$ git diff --staged 
		$ git diff --cached
		
	Skipping the Staging Area
		$ git commit -a -m 'Add new benchmarks'	
		
	Removing the file 
		$ git rm <Pattern>
		
	Remove JUST from stage 
		$ git rm --cached <Pattern>	
		
	Moving Files	
		$ git mv file_from file_to
		
		E,g git mv README.md README 
		This is equivalent to running something like this:
		$ mv README.md README
		$ git rm README.md
		$ git add README
	
	Viewing the Commit History
	
		diff --git a/lib/simplegit.rb b/lib/simplegit.rb

		By Default git log wil lshow in reverse chronological order.
		$ git log
		
		Popular options 
		-n for N entries
		-p or --patch shows the diff between tow rev as a patch output 
		--pretty=format Useful specifiers for git log --pretty=format	
		--since=2.weeks
		--since="2008-01-15"
		--since, --after
		--until, --before
		--author
		--grep option lets you search for keywords in the commit messages.
		-S function_name Only show commits adding or removing code matching the string.
		-- path/to/file
		
		E,g 
		git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
--before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn
branch
		
			
	Undoing Things
		Unmodifying a Modified File
			To discard changes in working directory
			It’s important to understand that git checkout -- <file> is a dangerous command.
			Any local changes you made to that file are gone
			
			$ git checkout -- <FileName> 
	
		Undoing things with git restore
		
	
		ReCommit
			If you want to redo that commit, make the additional
			changes you forgot, stage them, and commit again using the --amend option:
			
			$ git commit --amend 

			E,g
			$ git commit -m 'Initial commit'
			$ git add forgotten_file
			$ git commit --amend
			You end up with a single commit
		
		
		
		Unstaging a Staged File
			git reset HEAD <file>… to unstage.
			
			$ git reset HEAD CONTRIBUTING.md
			
		Undoing things with git restore [Since git 2.23.0]
			Similar to git reset to unstage the changes 
			
			git restore --staged CONTRIBUTING.md
			
			
	Working with Remotes
		“remote” does not imply that the repository is somewhere else on the network or Internet, only that it is elsewhere. Could be elsewhere on same machine
		$ git remote -v
		origin https://github.com/schacon/ticgit (fetch)
		origin https://github.com/schacon/ticgit (push)
		
		origin — that is the default name Git gives to the server you cloned from:
		
		If you have more than one remote
		$ git remote -v
		bakkdoor https://github.com/bakkdoor/grit (fetch)
		bakkdoor https://github.com/bakkdoor/grit (push)
		cho45 https://github.com/cho45/grit (fetch)
		cho45 https://github.com/cho45/grit (push)
		defunkt https://github.com/defunkt/grit (fetch)
		defunkt https://github.com/defunkt/grit (push)
		koke git://github.com/koke/grit.git (fetch)
		koke git://github.com/koke/grit.git (push)
		origin git@github.com:mojombo/grit.git (fetch)
		origin git@github.com:mojombo/grit.git (push)		
		
	Adding new remote	
		$ git remote
		origin
		$ git remote add pb https://github.com/paulboone/ticgit
		$ git remote -v
		origin https://github.com/schacon/ticgit (fetch)
		origin https://github.com/schacon/ticgit (push)
		pb https://github.com/paulboone/ticgit (fetch)
		pb https://github.com/paulboone/ticgit (push)
		
		Now you can use the string pb on the command line in lieu of the whole URL
		E,g git fetch pb
		
		
	Fetching and Pulling from Your Remotes
		$ git fetch <remote>
