Best Linux books 
===============================================================================================================
https://0xax.gitbooks.io/linux-insides/content/
https://biriukov.dev/docs/page-cache/0-linux-page-cache-for-sre/
http://arthurchiao.art/blog/tcp-listen-a-tale-of-two-queues/

IPC &  system call
===============================================================================================================
A system call is just a userspace request of a kernel service. 


ipcs - show information on IPC facilities
        -m, --shmems            active shared memory segments.
       -q, --queues             active message queues.
       -s, --semaphores
           active semaphore sets.
       -a, --all

Difference between semaphore and mutex synchronization 
1. mutex Unlike a semaphore, only one process may hold mutex at one time and only the owner of a mutex may release or unlock it. 
2. The semaphore synchronization primitive forces rescheduling of processes which are in waiters list. 
The implementation of mutex lock API allows to avoid this situation and as a result expensive context switches.
        binary semaphore;
        normal semaphore.


The semaphores, queues and shared memory for Posix have Ascii string names, while under System V these are given with integer number.
The System V semaphores allows to be automatically released if process dies (semop SEM_UNDO flag). There is no such thing for Posix.
On Linux and FreeBSD there is big advantage of posix queues, as handler given by mq_open are basically file descriptor which can be polled/epolled/selected/kqueued.

int shmget(key_t key, size_t size, int shmflg)
   shmid = shmget(SHM_KEY, sizeof(struct shmseg), 0644|IPC_CREAT);
void * shmat(int shmid, const void *shmaddr, int shmflg)
   shmp = shmat(shmid, NULL, 0);
int shmdt(const void *shmaddr)
   if (shmctl(shmid, IPC_RMID, 0) == -1) {


sem_close(3), sem_getvalue(3), sem_post(3), sem_unlink(3),
       sem_wait(3), sem_overview(7)

       shm_open(3) Create and open a new object, or open an existing object.

       ftruncate(2) Set the size of the shared memory object.  (A newly created shared memory object has a length of zero.)

       mmap(2) Map the shared memory object into the virtual address space of the calling process.

       munmap(2) Unmap the shared memory object from the virtual address space of the calling process.

       shm_unlink(3) Remove a shared memory object name.

       close(2) Close the file descriptor allocated by shm_open(3) when it is no longer needed.

       fstat(2)
              Obtain a stat structure that describes the shared memory
              object.  Among the information returned by this call are
              the object's size (st_size), permissions (st_mode), owner
              (st_uid), and group (st_gid).

       fchown(2)
              To change the ownership of a shared memory object.

       fchmod(2)
              To change the permissions of a shared memory object.       

FILE System 
===============================================================================================================
O_EXCL
If O_CREAT and O_EXCL are set, open() shall fail if the file exists. The check for the existence of the file and the creation of the file if it does not exist shall be atomic with respect to other threads executing open() naming the same filename in the same directory with O_EXCL and O_CREAT set. If O_EXCL and O_CREAT are set, and path names a symbolic link, open() shall fail and set errno to [EEXIST], regardless of the contents of the symbolic link. If O_EXCL is set and O_CREAT is not set, the result is undefined.
Types of File Locking in Linux
There are two types of file locking in Linux:

Advisory Locking
Mandatory Locking
But making mandatory locking work requires comparatively more steps:
Mounting files with the “-o mand” option.
Also, users are required to turn off the group execute bit and turn on set-group-ID to enable mandatory locking as when you turn off the group-execute bit, set-group-ID will have no impact.

